#+title: REAMDE Config
#+author: Sergio Ben√≠tez

** Doom Directory

- ~config.el~: Configuration file for doom emacs. Here I specify the ~doom-font~, ~doom-theme~ and some customize mappings.
- ~REAMDE.org~: File to document the configurations and the package that I'm using for doom emacs.
- ~init.el~: File that initialize doom with popular packages. You can enalbe or disalbe them.
- ~package.el~: File to specify the use of packages that are in [[https://melpa.org][melpa]].

** Useful Shortcuts

- ~SPC h r r~: to reload doom emacs
- ~SPC f p~: to open doom directory files.
- ~SPC g g~: open magit.
- ~SPC o t~: open a bash terminal.
- ~g c c~: to comment/uncomment lines in ~.el~ files.


** Doom Doctor Warnings

- x Couldn't find the ~rg~ binary; this a hard dependecy for Doom, file searches may not work at all

#+BEGIN_SRC
sudo apt install ripgrep
#+END_SRC

- ! Couldn't find the ~fd~ binary; project file searches will be slightly slower

#+BEGIN_SRC
sudo apt install fd-find
#+END_SRC

- ! Couldn't find a markdown compiler, ~markdown-preview~ won't work

#+BEGIN_SRC
sudo apt install pandoc
#+END_SRC

- ! Couldn't find ~shellcheck~. Shell script linting will not work

#+BEGIN_SRC
sudo apt install shellcheck
#+END_SRC

** Neotree

A Emacs tree plugin like NerdTree for Vim

The next setup in the ~config.el~ file is to open neotree at the right:

#+begin_src emacs-lisp
(after! neotree
  (setq neo-smart-open t
        neo-window-fixed-size nil
        neo-window-position (quote right)
        neo-theme (if (display-graphic-p) 'icons 'arrow)))
#+end_src


NeoTree provides following themes: classic(default) ascii arrow icons nerd. Theme can be configured by setting ~neo-theme~. For example, you use icons for window system and arrow terminal as indicates the last line of the previous snippet.

#+begin_quote
Note: For users who want to use the icons theme. Pls make sure you have installed the all-the-icons package and its fonts.
#+end_quote

And below I associate the key combinations ~SPC d v~ for neotree:

#+begin_src emacs-lisp
(map! :leader
      :desc "Toggle neotree file viewer" "d v" #'neotree-toggle
      :desc "Open directory in neotree" "d n" #'neotree-dir)
#+end_src

** Org-auto-tangle

This package allows you to automatically tangle org files on save. This is done by adding the ~#+auto_tangle~ option in your org file.

The tangling process happens asynchronously, so, it will not block your emacs session.


#+begin_src emacs-lisp
(use-package! org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (set org-auto-tangle-defatult t)
  )
#+end_src

** Org-reveal

This package allows you to export ~.org~ files into RevealJS. Before use it, add the next setup in the ~config.el~ file:

#+begin_src emacs-lisp
;; ~/.doom.d/config.el
(after! org
  (load-library "ox-reveal")
#+end_src

Now to export from a ~org-file~  to RevealJS exceute the next steps:

1. Specify the ~REVEAL_PROPERTIES~.
2. Use the next keybindings ~SPC m e R B~ to export to RevealJS.
3. After the first export you can use ~SPC m e R R~ to rewrite the existing html.
